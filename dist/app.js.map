{"version":3,"sources":["../src/app.js"],"names":["express","require","mongoose","path","cors","methodOverride","passport","config","console","log","process","env","PORT","MONGO_URL","passportConfig","Section","User","bodyParser","parse","session","userRoutes","authRoutes","postRoutes","sectionRoutes","adminRoutes","editorRoutes","pagesRoutes","frontendRoutes","app","port","use","secret","resave","saveUninitialized","initialize","origin","locals","parser","urlencoded","extended","json","set","join","__dirname","static","mongoUrl","main","then","catch","err","connect","get","req","res","user","render","send","listen"],"mappings":"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","file":"app.js","sourcesContent":["//src/app.js\r\nconst express = require('express');\r\nconst mongoose = require('mongoose');\r\nconst path = require('path');\r\nconst cors = require('cors');\r\nconst methodOverride = require('method-override');\r\nconst passport = require('passport');\r\n\r\n// Load environment variables from .env\r\nrequire('dotenv').config();\r\nconsole.log('PORT:', process.env.PORT);\r\nconsole.log('MONGO_URL:', process.env.MONGO_URL);\r\n\r\n\r\n// Import passport-config.js to configure Passport\r\nconst passportConfig = require('../public/js/passport-config');  // Adjusted path\r\n\r\nconst Section = require('../models/section');  // Adjusted path\r\nconst User = require('../models/user.js');  // Adjusted path\r\n\r\nconst bodyParser = require('body-parser');\r\nconst { parse } = require('node-html-parser');\r\nconst session = require('express-session');\r\n\r\nconst userRoutes = require('../routes/user');  \r\nconst authRoutes = require('../routes/auth');  \r\nconst postRoutes = require('../routes/post');  \r\nconst sectionRoutes = require('../routes/section');  \r\nconst adminRoutes = require('../routes/admin');  \r\nconst editorRoutes = require('../routes/editor'); \r\nconst pagesRoutes = require('../routes/pages');  \r\nconst frontendRoutes = require('../routes/frontend'); \r\n\r\nconst app = express();\r\nconst port = process.env.PORT;\r\n\r\n// Set up session and Passport middleware\r\napp.use(session({ secret: 'your-secret-key', resave: true, saveUninitialized: true }));\r\napp.use(passport.initialize());\r\napp.use(passport.session());\r\n\r\napp.use(cors({\r\n    origin: '*',\r\n}))\r\n\r\napp.locals.parser = parse;\r\napp.use(express.urlencoded({ extended: true }));\r\napp.use(express.json());\r\n\r\n// Set up EJS as the view engine\r\napp.set('views', path.join(__dirname, '../views'));  // Adjusted path\r\napp.set('view engine', 'ejs');\r\napp.use(express.static(path.join(__dirname, '../public')));  // Adjusted path\r\napp.use('/admin/node_modules', express.static(path.join(__dirname, '../node_modules')));  // Adjusted path\r\n// Use method-override middleware\r\napp.use(methodOverride('_method'));\r\n\r\n// MongoDB connection\r\nconst mongoUrl = process.env.MONGO_URL;\r\nmain()\r\n    .then(() => {\r\n        console.log('connected to db');\r\n    })\r\n    .catch((err) => {\r\n        console.log(err);\r\n    });\r\n\r\nasync function main() {\r\n    await mongoose.connect(mongoUrl);\r\n}\r\napp.use('/', frontendRoutes);\r\n// Use the user and auth routes\r\napp.use('/user', userRoutes);\r\n// Use the authentication routes\r\napp.use('/auth', authRoutes);\r\n// Post route\r\napp.use('/post', postRoutes);\r\n// Use the section routes\r\napp.use('/admin/section', sectionRoutes);\r\n// Use the admin routes\r\napp.use('/admin', adminRoutes);\r\n// Use the editor routes\r\napp.use('/editor', editorRoutes);\r\n// Pages\r\napp.use('/admin/pages', pagesRoutes);\r\n\r\n// Dashboard route\r\napp.get('/user/dashboard', (req, res) => {\r\n    const user = req.user; // Passport sets the authenticated user in req.user\r\n    if (user) {\r\n        // User is authenticated\r\n        res.render('user/dashboard', { user });\r\n    } else {\r\n        // User not found in the session\r\n        res.send('User not found');\r\n    }\r\n});\r\n\r\n// User routes\r\napp.get('/register', (req, res) => {\r\n    res.render('register');\r\n});\r\n\r\napp.get('/login', (req, res) => {\r\n    res.render('user/login');\r\n});\r\n\r\n// Start the server\r\napp.listen(port, () => {\r\n    console.log(`Server is running on port ${port}`);\r\n});\r\n"]}