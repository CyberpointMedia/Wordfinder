{"version":3,"sources":["../src/app.js"],"names":["express","require","mongoose","path","cors","methodOverride","passport","config","passportConfig","Section","User","bodyParser","parse","session","userRoutes","authRoutes","postRoutes","sectionRoutes","adminRoutes","editorRoutes","pagesRoutes","app","port","process","env","PORT","use","secret","resave","saveUninitialized","initialize","origin","locals","parser","urlencoded","extended","json","set","join","__dirname","static","mongoUrl","MONGO_URL","main","then","console","log","catch","err","connect","get","req","res","user","render","send","listen"],"mappings":"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","file":"app.js","sourcesContent":["const express = require('express');\r\nconst mongoose = require('mongoose');\r\nconst path = require('path');\r\nconst cors = require('cors');\r\nconst methodOverride = require('method-override');\r\nconst passport = require('passport');\r\n\r\n// Load environment variables from .env\r\nrequire('dotenv').config();\r\n\r\n// Import passport-config.js to configure Passport\r\nconst passportConfig = require('../public/js/passport-config');  // Adjusted path\r\n\r\nconst Section = require('../models/section');  // Adjusted path\r\nconst User = require('../models/user.js');  // Adjusted path\r\n\r\nconst bodyParser = require('body-parser');\r\nconst { parse } = require('node-html-parser');\r\nconst session = require('express-session');\r\n\r\nconst userRoutes = require('../routes/user');  // Adjusted path\r\nconst authRoutes = require('../routes/auth');  // Adjusted path\r\nconst postRoutes = require('../routes/post');  // Adjusted path\r\nconst sectionRoutes = require('../routes/section');  // Adjusted path\r\nconst adminRoutes = require('../routes/admin');  // Adjusted path\r\nconst editorRoutes = require('../routes/editor');  // Adjusted path\r\nconst pagesRoutes = require('../routes/pages');  // Adjusted path\r\n\r\nconst app = express();\r\nconst port = process.env.PORT;\r\n\r\n// Set up session and Passport middleware\r\napp.use(session({ secret: 'your-secret-key', resave: true, saveUninitialized: true }));\r\napp.use(passport.initialize());\r\napp.use(passport.session());\r\n\r\napp.use(cors({\r\n    origin: '*',\r\n}))\r\n\r\napp.locals.parser = parse;\r\napp.use(express.urlencoded({ extended: true }));\r\napp.use(express.json());\r\n\r\n// Set up EJS as the view engine\r\napp.set('views', path.join(__dirname, '../views'));  // Adjusted path\r\napp.set('view engine', 'ejs');\r\napp.use(express.static(path.join(__dirname, '../public')));  // Adjusted path\r\napp.use('/admin/node_modules', express.static(path.join(__dirname, '../node_modules')));  // Adjusted path\r\n// Use method-override middleware\r\napp.use(methodOverride('_method'));\r\n\r\n// MongoDB connection\r\nconst mongoUrl = process.env.MONGO_URL;\r\nmain()\r\n    .then(() => {\r\n        console.log('connected to db');\r\n    })\r\n    .catch((err) => {\r\n        console.log(err);\r\n    });\r\n\r\nasync function main() {\r\n    await mongoose.connect(mongoUrl);\r\n}\r\n\r\n// Use the user and auth routes\r\napp.use('/user', userRoutes);\r\n// Use the authentication routes\r\napp.use('/auth', authRoutes);\r\n// Post route\r\napp.use('/post', postRoutes);\r\n// Use the section routes\r\napp.use('/admin/section', sectionRoutes);\r\n// Use the admin routes\r\napp.use('/admin', adminRoutes);\r\n// Use the editor routes\r\napp.use('/editor', editorRoutes);\r\n// Pages\r\napp.use('/admin/pages', pagesRoutes);\r\n\r\n// Dashboard route\r\napp.get('/user/dashboard', (req, res) => {\r\n    const user = req.user; // Passport sets the authenticated user in req.user\r\n\r\n    if (user) {\r\n        // User is authenticated\r\n        res.render('user/dashboard', { user });\r\n    } else {\r\n        // User not found in the session\r\n        res.send('User not found');\r\n    }\r\n});\r\n\r\n// User routes\r\napp.get('/register', (req, res) => {\r\n    res.render('register');\r\n});\r\n\r\napp.get('/login', (req, res) => {\r\n    res.render('user/login');\r\n});\r\n\r\n// Start the server\r\napp.listen(port, () => {\r\n    console.log(`Server is running on port ${port}`);\r\n});\r\n"]}